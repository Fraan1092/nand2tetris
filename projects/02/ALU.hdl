// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //pre-sets x input 
    Not16(in=true, out=xzero); //zeroes x
    Mux16(a=x, b=xzero, sel=zx, out=x0); //selects x or zero
    Not16(in=x0, out=notx);//flips x
    Mux16(a=x0, b=notx, sel=nx, out=x1);//selects x or not x

    //pre-sets y input 
    Not16(in=true, out=yzero); //zeroes y
    Mux16(a=y, b=yzero, sel=zy, out=y0); //selects y or zero
    Not16(in=y0, out=noty);//flips y
    Mux16(a=y0, b=noty, sel=ny, out=y1);//selects x or not y

    //computes + 
    Mux16(a=false, b=x1, sel=f, out=xsum);
    Mux16(a=false, b=y1, sel=f, out=ysum);
    Add16(a=xsum, b=ysum, out=sum);
    //computes &
    Mux16(a=x1, b=false, sel=f, out=xand);
    Mux16(a=y1, b=false, sel=f, out=yand);
    And16(a=xand, b=yand, out=and);
    //chooses + or &
    Mux16(a=and, b=sum, sel=f, out=compute);

    //negate output (and ng flag)
    Not16(in=compute, out=notcomp);
    Mux16(a=compute, b=notcomp, sel=no, out=out, out=zrout, out[15]=ng);

    //zero flag
    Not16(in=zrout, out[0]=notout0,
    out[1]=notout1,
    out[2]=notout2,
    out[3]=notout3,
    out[4]=notout4,
    out[5]=notout5,
    out[6]=notout6,
    out[7]=notout7,
    out[8]=notout8,
    out[9]=notout9,
    out[10]=notout10,
    out[11]=notout11,
    out[12]=notout12,
    out[13]=notout13,
    out[14]=notout14,
    out[15]=notout15);
    And(a=notout0, b=notout9, out=and0);
    And(a=notout2, b=notout8, out=and1);
    And(a=notout3, b=notout12, out=and2);
    And(a=notout4, b=notout13, out=and3);
    And(a=notout1, b=notout10, out=and4);
    And(a=notout5, b=notout14, out=and5);
    And(a=notout6, b=notout11, out=and6);
    And(a=notout7, b=notout15, out=and7);

    And(a=and0, b=and4, out=anda);
    And(a=and1, b=and5, out=andb);
    And(a=and2, b=and6, out=andc);
    And(a=and3, b=and7, out=andd);

    And(a=anda, b=andb, out=and00);
    And(a=andc, b=andd, out=and11);

    And(a=and00, b=and11, out=zr);
}